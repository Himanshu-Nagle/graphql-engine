Bijdragen aan Hasura graphql-engine
Ten eerste: als je je onzeker voelt over hoe je beginnen met bijdragen, vraag het ons dan gerust op ons Discord-kanaal in het #contrib kanaal. Je ook gewoon doorgaan met je bijdrage en we geven je feedback. Maak je geen zorgen - het ergste dat kan gebeuren is dat je beleefd wordt gevraagd om iets te veranderen. We waarderen alle bijdragen, en we willen niet dat een muur van regels dat in de weg staat.

Echter, voor die personen die willen een beetje meer begeleiding over de beste manier om bij te dragen aan het project, lees verder. Dit document zal betrekking hebben op wat we zoeken. Door de onderstaande punten aan te pakken, neemt de kans toe dat we uw bijdragen snel kunnen samenvoegen of aanpakken.

Inhoudsopgave
1. Gedragscode

2. Repo overzicht

3. Eerste keer medewerkers welkom!

4.

5.

6. Berichten vastleggen

7. Vertalingen

1. Gedragscode
Volg onze gedragscode in het kader van eventuele bijdragen aan Hasura.

2. Repo overzicht
hasura/graphql-engine is een mono-repo bestaande uit 3 componenten. Elk heeft zijn eigen bijdragende gidsen:

Server (Haskell)

CLI (Go)

Console (JavaScript)

Alle drie de componenten hebben een enkele versie, aangeduid met de git tag of een combinatie van branch name en git commit SHA.

Voor alle bijdragen moet hier een CLA (Contributor License Agreement) worden ondertekend voordat (of na) het pull-verzoek is ingediend. Een bot zal medewerkers vragen om de CLA te ondertekenen via een pull request commentaar, indien nodig.

3. Eerste keer medewerkers welkom!
We stellen het voor het eerst op prijs en helpen u graag bij het aan de slag. In geval van vragen, neem dan contact met ons op!

Hier vindt u alle problemen die geschikt zijn voor de eerste keer bijdragers.

4.
Natuurlijk waarderen we bijdragen aan alle onderdelen van Hasura. We hebben echter drie gebieden aangewezen die bijzonder geschikt zijn voor open source-bijdragen.

Docs
Ons doel is om onze documenten uitgebreid en bijgewerkt te houden. Als u ons daarbij wilt helpen, zijn we u dankbaar voor elke bijdrage:

Ontbrekende inhoud melden

Fouten in bestaande documenten oplossen

Help ons bij het toevoegen aan de documenten

De bijdragende gids voor docs is te vinden op docs/CONTRIBUTING.md.

Community-inhoud
Sinds we onze leerpagina hebben gelanceerd, zijn we tevreden over de bijdragen:

Fouten in bestaande leer zelfstudies oplossen

Voeg nieuwe tutorials toe (neem contact met ons op als je ideeÃ«n hebt om duplicaatwoord te voorkomen)

De README van de learn repository is hier te vinden.

Naast de leerinhoud hebben we nog drie andere manieren gevonden om bij te dragen met de inhoud van de technische community:

Ketelplaten

Voorbeeld-apps

Tools

Als u wilt bijdragen aan de gemeenschap door

het schrijven van een technische blogpost

spreken op een evenement

het organiseren van een workshop

bekijk onze community wiki.

Voel je vrij om een pull verzoek in te dienen als je iets toe te voegen, zelfs als het niet gerelateerd aan iets hierboven vermeld.

Hasura CLI
We hebben een aantal problemen op de CLI die geschikt zijn voor open source bijdragen. Als je Go kent of als je het wilt leren door te doen, bekijk dan de volgende problemen.

De README van de CLI repository is hier te vinden.

5.
Een probleem melden
Zorg ervoor dat u test tegen de nieuwste versie. Het is mogelijk dat we de bug die je ondervindt al hebben opgelost.

Geef stappen om het probleem te reproduceren, inclusief de Postgres-versie, de graphql-engine-versie en de provider waarop u actief bent (Heroku, Docker, enz.).

Vermeld logboeken van de server, indien relevant.

Werken aan een probleem
We maken gebruik van de fork-and-branch git workflow.

Zorg ervoor dat er een probleem is in verband met het werk dat u doet.

Als u aan een probleem werkt, u erop opmerking maken dat u dit doet om ook dubbel werk van anderen te voorkomen.

Plet je commits en verwijs naar het probleem met fix #<issue-no> of sluit #<issue-no> in het commit-bericht, aan het einde. Bijvoorbeeld: problemen oplossen op alles (fix #42) of antwoorden op alles oplossen, #42

Rebase master met uw branch voordat u een pull request indient.

6. Berichten vastleggen
De eerste regel moet een samenvatting zijn van de wijzigingen, niet meer dan 50 tekens, gevolgd door een optionele instantie die meer details over de wijzigingen heeft. Raadpleeg deze link voor meer informatie over het schrijven van goede commit berichten.

Gebruik de imperatieve huidige tijd: "add/fix/change", niet "added/fixed/changed" noch "adds/fixes/changes".

Profiteer niet van de eerste letter van de samenvattende regel.

Voeg geen punt/punt (.) toe aan het einde van de overzichtsregel.

7. Vertalingen
Dit document is beschikbaar in de volgende vertalingen:

Franse ðŸ‡«ðŸ‡·
(Credits: Sommige secties zijn aangepast aan https://github.com/PostgREST/postgrest/blob/master/.github/CONTRIBUTING